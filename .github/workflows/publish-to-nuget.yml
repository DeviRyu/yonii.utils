name: Create Release and Publish NuGet
run-name: ${{ github.actor }} is creating a new NuGet package
on:
  push:
    branches:
      - master
jobs:
  Publish-Package-To-NuGet:
    runs-on: ubuntu-latest
    steps:
      - run: echo "This job was automatically triggered by a ${{ github.event_name }} event."

  run_tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4.2.2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with: 
          dotnet-version: 9.0.x

      - name: Run Unit Tests
        run: dotnet test Yonii.Utils.UnitTests/Yonii.Utils.UnitTests.csproj --configuration Release

  check_version:
    needs: [run_tests]
    name: Set Git Version
    runs-on: ubuntu-latest
    outputs:
      branchName: ${{ steps.version_step.outputs.branchName }}
      fullSemVer: ${{ steps.version_step.outputs.fullSemVer }}

      GitVersion_BranchName: ${{ steps.version_step.outputs.GitVersion_BranchName }}
      GitVersion_FUllSemVer: ${{ steps.version_step.outputs.GitVersion_FullSemVer }}
      
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.2.1
        with:
          versionSpec: '6.3.x'

      - name: Determine Version
        id: version_step
        uses: gittools/actions/gitversion/execute@v3.2.1
        with:
          updateProjectFiles: true
          useConfigFile: true

      - run: | 
          echo "fullSemVer (env.fullSemVer) : ${{ env.fullSemVer }}"

      - run: |
          echo "FullSemVer (env.GitVersion_FullSemVer) : ${{ env.GitVersion_FullSemVer }}"
          
      - run: |
          echo "FullSemVer (steps.version_step.outputs.fullSemVer) : ${{ steps.version_step.outputs.fullSemVer }}"

  create_and_deploy_nuget:
    needs: [run_tests, check_version]
    name: Create and Deploy NuGet Package
    runs-on: ubuntu-latest
    timeout-minutes: 5

    if: contains(needs.check_version.outputs['GitVersion_BranchName'], 'master')
    env:
      GitVersion_FullSemVer: ${{ needs.check_version.outputs.GitVersion_FullSemVer }}
    
    steps:
      # Checkout the git repository
      - name: Checkout
        uses: actions/checkout@v4.2.2

      # .NET Core
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with: 
          dotnet-version: 9.0.x

      # Build project
      - name: Build
        run: dotnet build -c Release /p:Version=${{ env.GitVersion_FullSemVer }}

      - name: Pack nuget
        run: dotnet pack -c Release --no-build

      - name: Push nuget package
        run: dotnet nuget push **/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate

  create_tag:
    name: Create New TAG
    needs: [check_version]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4.2.2

      - name: SetUp Git
        run: |
          git config user.name "${{ secrets.GIT_USER_NAME }}"
          git config user.email "${{ secrets.GIT_EMAIL }}"

      - name: Create and push tag
        run: |
          NEW_TAG="${{ needs.check_version.outputs.GitVersion_FullSemVer }}"
          git tag "${NEW_TAG}"
          echo "Tag created: ${NEW_TAG}"
          git push origin "${NEW_TAG}"

  create_release:
    name: Create New GitHub Release
    needs: [check_version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4.2.2

      - name: Create GitHub Release
        run: |
          git fetch --tags
          NEW_TAG=$(git describe --tags --abbrev=0 origin/master)
          echo "Latest tag from master: ${NEW_TAG}"
          gh release create "${NEW_TAG}" \
              --repo="$GITHUB_REPOSITORY" \
              --title="${NEW_TAG#v}" \
              --generate-notes \
              --generate-notes \
              --verify-tag \
              --latest